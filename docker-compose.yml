services:
  query_postgres:
    image: ${POSTGRES_IMAGE}
    command: postgres -c shared_buffers=${QUERY_POSTGRES_SHARED_BUFFERS} -c work_mem=${QUERY_POSTGRES_WORK_MEM} -c listen_addresses='*'
    restart: ${RESTART_POLICY:-always}
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - PGAUTO_REINDEX=no
    shm_size: ${POSTGRES_SHM_SIZE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    # Always expose port for viewer access
    ports:
      - "${POSTGRES_EXPOSE:-5512}:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - common_net

  query:
    image: ghcr.io/openfoodfacts/openfoodfacts-query:${TAG}
    restart: ${RESTART_POLICY:-always}
    deploy:
      resources:
        limits:
          memory: ${QUERY_MEMORY_LIMIT:-512M}
    environment:
      # When we are running inside docker we use the internal port
      - POSTGRES_HOST=query_postgres:5432
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - MONGO_URI
      - REDIS_URL
      - LOG_LEVEL
    # Use a different number so does not clash with locally running instance
    ports:
      - "${QUERY_PORT:-5511}:5510"
    depends_on:
      query_postgres:
        condition: service_healthy
    networks:
      - common_net

networks:
  common_net:
    name: ${COMMON_NET_NAME}
    external: true

volumes:
  dbdata:
